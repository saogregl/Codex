datasource db {
  provider = "sqlite"
  url      = "file:C:/Development/teste/dev.db"
}

generator client {
  provider    = "cargo prisma"
  output      = "../../crates/prisma/src/prisma.rs"
  module_path = "codex_prisma::prisma"
}

model User {
  id          String @id
  displayName String
}

model Object {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  obj_name String?
  // Enum: sd_file_ext::kind::ObjectKind
  kind     Int?

  // handy ways to mark an Object
  hidden        Boolean?
  favorite      Boolean?
  important     Boolean?
  note          String?
  date_created  DateTime? @default(now())
  date_modified DateTime?

  //path 
  path          String?
  extension     String?
  relative_path String? // relative to the location

  //So it can be searched 
  parsed_path String?
  parsed      Boolean?
  indexed     Boolean?

  //
  thumbnail_path String?
  thumbnail      Boolean?

  tags       TagOnObject[]
  labels     LabelOnObject[]
  //Every object belongs to a location and every location belongs to a library
  Library    Library         @relation(fields: [libraryId], references: [uuid])
  libraryId  String
  Locations  Location        @relation(fields: [locationId], references: [uuid])
  locationId String

  @@map("Object")
}

model Location {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name                   String?
  path                   String
  total_capacity         Int?
  available_capacity     Int?
  is_archived            Boolean?
  generate_preview_media Boolean?
  hidden                 Boolean?
  date_created           DateTime?

  instance_id Int?
  Library     Library? @relation(fields: [libraryId], references: [id])
  libraryId   Int?
  Object      Object[]

  // instance    Instance? @relation(fields: [instance_id], references: [id]) // TODO: Enabling this breaks migration 7's `update_many` in `library/config.rs`
  @@map("location")
}

model Library {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  name            String?
  // Enum: ???
  redundancy_goal Int?
  date_created    DateTime?
  date_modified   DateTime?

  // the library can contain multiple locations. 
  locations Location[]

  Objects Object[]

  @@map("library")
}

//// Tag ////

/// @shared(id: pub_id)
model Tag {
  id              Int           @id @default(autoincrement())
  pub_id          Bytes         @unique
  name            String?
  color           String?
  // Enum: ??
  redundancy_goal Int?
  date_created    DateTime?
  date_modified   DateTime?
  tag_Objects     TagOnObject[]

  @@map("tag")
}

/// @relation(item: tag, group: Object)
model TagOnObject {
  tag_id    Int
  tag       Tag    @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Object_id Int
  Object    Object @relation(fields: [Object_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tag_id, Object_id])
  @@map("tag_on_Object")
}

//// Label ////

model Label {
  id            Int             @id @default(autoincrement())
  pub_id        Bytes           @unique
  name          String?
  date_created  DateTime        @default(now())
  date_modified DateTime        @default(now())
  label_Objects LabelOnObject[]

  @@map("label")
}

model LabelOnObject {
  date_created DateTime @default(now())
  label_id     Int
  label        Label    @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Object_id    Int
  Object       Object   @relation(fields: [Object_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([label_id, Object_id])
  @@map("label_on_Object")
}
